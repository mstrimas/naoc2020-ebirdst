[
["index.html", "NAOC 2020: eBird Status and Trends Welcome 0.1 Setup", " NAOC 2020: eBird Status and Trends Matthew Strimas-Mackey, Tom Auer 2020-08-10 Welcome The community science project eBird has generated a database of over 800 million bird observations, with broad spatial and taxonomic coverage. Over the past 10 years, the Cornell Lab of Ornithology has developed machine-learning models using eBird and remotely-sensed data to produce high resolution, weekly estimates of range boundaries, occurrence rate, and relative abundance while accounting for many of the biases inherent in community science datasets, including variation in observer behavior and effort. Visualizations and modeled data products for 610 North American breeding birds, including resident and non-breeding grounds in South America, are currently available on the eBird Status and Trends website. This workshop will introduce attendees to the modeled data products (weekly estimates of range boundaries, occurrence rate, and relative abundance) and the ebirdst R package developed specifically for working with these data. This will include an introduction to the modeling process used to generate the eBird Status and Trends data products. It will also include a demonstration of how to access and manipulate these data products for specific combinations of species, seasons, and regions using the ebirdst package. After the workshop, attendees will have an understanding of how and when to use these data products for applied research and conservation efforts, including within-year dynamics. Some experience with R will be helpful in following along with the demonstration. Please note, this workshop will not cover the analysis of trends or trend data. 0.1 Setup The follow along with the code in the workshop you will need to install the following packages: install.packages(c(&quot;tidyverse&quot;, &quot;raster&quot;, &quot;sf&quot;, &quot;ebirdst&quot;, &quot;rnaturalearth&quot;)) To download the source files and following along with this workshop visit the GitHub repository. "],
["access.html", "Chapter 1 Data Access 1.1 Objective 1.2 Introduction 1.3 Species list 1.4 Download data 1.5 Load data 1.6 Mapping", " Chapter 1 Data Access 1.1 Objective In this lesson, weâ€™ll learn how to download eBird Status &amp; Trends data using the R package ebirdst, load them into R and make a simple map. 1.2 Introduction eBird Status and Trends provides modeled estimates of the distribution and relative abundance of 610 North American breeding bird species over their full annual cycle at high spatial and temporal resolution. All the data behind the maps youâ€™ve likely seen online are freely and openly available, hosted by the Registry of Open Data on AWS. In addition to being able to download the data from AWS, we maintain the ebirdst R package for easily accessing and working with these data. In this lesson, weâ€™ll show you how to access these data and load them into your R session. Letâ€™s start by loading the ebirdst R package and some additional packages for working with the data. library(ebirdst) library(raster) library(dplyr) 1.3 Species list Data for 610 North American bird species are available through ebirdst. The ebirdst_runs object is a data frame of all the available species, including their unique run names and the seasonal dates for each. glimpse(ebirdst_runs) #&gt; Rows: 610 #&gt; Columns: 14 #&gt; $ species_code [3m[90m&lt;chr&gt;[39m[23m &quot;bbwduc&quot;, &quot;fuwduc&quot;, &quot;empgoo&quot;, &quot;snogoo&quot;, &quot;roâ€¦ #&gt; $ run_name [3m[90m&lt;chr&gt;[39m[23m &quot;bbwduc-ERD2018-EBIRD_SCIENCE-20191105-dc39â€¦ #&gt; $ scientific_name [3m[90m&lt;chr&gt;[39m[23m &quot;Dendrocygna autumnalis&quot;, &quot;Dendrocygna bicoâ€¦ #&gt; $ common_name [3m[90m&lt;chr&gt;[39m[23m &quot;Black-bellied Whistling-Duck&quot;, &quot;Fulvous Whâ€¦ #&gt; $ breeding_start_dt [3m[90m&lt;date&gt;[39m[23m 2018-05-24, 2018-05-10, 2018-05-24, 2018-0â€¦ #&gt; $ breeding_end_dt [3m[90m&lt;date&gt;[39m[23m 2018-08-03, 2018-08-17, 2018-06-21, 2018-0â€¦ #&gt; $ nonbreeding_start_dt [3m[90m&lt;date&gt;[39m[23m 2018-01-18, 2018-11-30, NA, 2018-12-28, 20â€¦ #&gt; $ nonbreeding_end_dt [3m[90m&lt;date&gt;[39m[23m 2018-03-01, 2018-02-15, NA, 2018-01-11, 20â€¦ #&gt; $ postbreeding_migration_start_dt [3m[90m&lt;date&gt;[39m[23m 2018-08-10, 2018-08-24, NA, 2018-08-24, 20â€¦ #&gt; $ postbreeding_migration_end_dt [3m[90m&lt;date&gt;[39m[23m 2018-01-11, 2018-11-23, NA, 2018-12-21, 20â€¦ #&gt; $ prebreeding_migration_start_dt [3m[90m&lt;date&gt;[39m[23m 2018-03-08, 2018-02-22, NA, 2018-01-18, 20â€¦ #&gt; $ prebreeding_migration_end_dt [3m[90m&lt;date&gt;[39m[23m 2018-05-17, 2018-05-03, NA, 2018-05-31, 20â€¦ #&gt; $ year_round_start_dt [3m[90m&lt;date&gt;[39m[23m NA, NA, NA, NA, NA, NA, NA, NA, NA, 2018-0â€¦ #&gt; $ year_round_end_dt [3m[90m&lt;date&gt;[39m[23m NA, NA, NA, NA, NA, NA, NA, NA, NA, 2018-1â€¦ If youâ€™re working in RStudio, you can use View() to interactively explore this data frame. You can also consult the Status and Trends landing page to see the full list of species. These seasonal dates are defined through a process of expert review of the weekly Status and Trends maps and define the start and end weeks of each of the following seasons: breeding, non-breeding, pre-breeding migration, and post-breeding migration. If dates are missing for a given season, it means the species did not pass the review process for that season. 1.4 Download data The function ebirdst_download() downloads data for a single species from AWS. All you need to do is provide the name (common name, scientific name, or species code) of the species you want to download. For this example, Iâ€™ll download the data for Loggerhead Shrike. sp_path &lt;- ebirdst_download(species = &quot;Loggerhead Shrike&quot;) sp_path #&gt; [1] &quot;/Users/mes335/Library/Application Support/ebirdst/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13&quot; The function will automatically identify a suitable location to store the downloaded data and return that path, which we captured in the variable sp_path. By default, ebirdst_download() downloads just the raster predictions from Status and Trends for relative occurrence, count, and abundance. We can see the files downloaded with: list.files(sp_path, recursive = TRUE) #&gt; [1] &quot;data/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_config.rds&quot; #&gt; [2] &quot;data/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_srd_raster_template.tif&quot; #&gt; [3] &quot;data/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_test-data.csv&quot; #&gt; [4] &quot;results/preds/test_pred_ave.txt&quot; #&gt; [5] &quot;results/stixels/pi.txt&quot; #&gt; [6] &quot;results/stixels/summary.txt&quot; #&gt; [7] &quot;results/tifs/band_dates.csv&quot; #&gt; [8] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_lower.tif&quot; #&gt; [9] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_median.tif&quot; #&gt; [10] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_seasonal_breeding.tif&quot; #&gt; [11] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_seasonal_nonbreeding.tif&quot; #&gt; [12] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_seasonal_postbreeding_migration.tif&quot; #&gt; [13] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_seasonal_prebreeding_migration.tif&quot; #&gt; [14] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_upper.tif&quot; #&gt; [15] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_yearround.tif&quot; #&gt; [16] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_count_median.tif&quot; #&gt; [17] &quot;results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_occurrence_median.tif&quot; There are some additional files that can be downloaded by specifying tifs_only = FALSE, which may be useful for certain applications. For further details on these data consult the associated ebirdst vignette. sp_path &lt;- ebirdst_download(species = &quot;logshr&quot;, tifs_only = FALSE) 1.5 Load data Now that weâ€™ve downloaded the data, letâ€™s load these data into our R session. These are raster data (i.e. estimates are provided over a regular grid) and therefore weâ€™ll need the raster package (loaded above) to work with them. There are a variety of layers available, but letâ€™s load the relative abundance estimates. To learn about some of the other layers, consult the associated vignette from the ebirdst package. abd &lt;- load_raster(product = &quot;abundance&quot;, path = sp_path) abd #&gt; class : RasterStack #&gt; dimensions : 5630, 7074, 39826620, 52 (nrow, ncol, ncell, nlayers) #&gt; resolution : 2963, 2963 (x, y) #&gt; extent : -2e+07, 943785, -6673060, 1e+07 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +a=6371007.181 +b=6371007.181 +units=m +no_defs #&gt; names : X2018.01.04, X2018.01.11, X2018.01.18, X2018.01.25, X2018.02.01, X2018.02.08, X2018.02.15, X2018.02.22, X2018.03.01, X2018.03.08, X2018.03.15, X2018.03.22, X2018.03.29, X2018.04.05, X2018.04.12, ... #&gt; min values : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ... #&gt; max values : 3.08, 3.04, 3.29, 3.31, 3.32, 3.32, 3.31, 3.09, 2.89, 2.53, 2.71, 2.20, 2.23, 2.34, 2.11, ... This is a RasterStack object with 52 layers, each providing a relative abundance estimate for a single week of the year. To see the dates corresponding to the midpoint of these weeks, use: parse_raster_dates(abd) #&gt; [1] &quot;2018-01-04&quot; &quot;2018-01-11&quot; &quot;2018-01-18&quot; &quot;2018-01-25&quot; &quot;2018-02-01&quot; &quot;2018-02-08&quot; #&gt; [7] &quot;2018-02-15&quot; &quot;2018-02-22&quot; &quot;2018-03-01&quot; &quot;2018-03-08&quot; &quot;2018-03-15&quot; &quot;2018-03-22&quot; #&gt; [13] &quot;2018-03-29&quot; &quot;2018-04-05&quot; &quot;2018-04-12&quot; &quot;2018-04-19&quot; &quot;2018-04-26&quot; &quot;2018-05-03&quot; #&gt; [19] &quot;2018-05-10&quot; &quot;2018-05-17&quot; &quot;2018-05-24&quot; &quot;2018-05-31&quot; &quot;2018-06-07&quot; &quot;2018-06-14&quot; #&gt; [25] &quot;2018-06-21&quot; &quot;2018-06-28&quot; &quot;2018-07-06&quot; &quot;2018-07-13&quot; &quot;2018-07-20&quot; &quot;2018-07-27&quot; #&gt; [31] &quot;2018-08-03&quot; &quot;2018-08-10&quot; &quot;2018-08-17&quot; &quot;2018-08-24&quot; &quot;2018-08-31&quot; &quot;2018-09-07&quot; #&gt; [37] &quot;2018-09-14&quot; &quot;2018-09-21&quot; &quot;2018-09-28&quot; &quot;2018-10-05&quot; &quot;2018-10-12&quot; &quot;2018-10-19&quot; #&gt; [43] &quot;2018-10-26&quot; &quot;2018-11-02&quot; &quot;2018-11-09&quot; &quot;2018-11-16&quot; &quot;2018-11-23&quot; &quot;2018-11-30&quot; #&gt; [49] &quot;2018-12-07&quot; &quot;2018-12-14&quot; &quot;2018-12-21&quot; &quot;2018-12-28&quot; For a given week, these data consist of estimates of relative abundance over a regular 2.96 km grid. For example, we can extract just the 20th week (centered on May 17, 2018) with: abd[[20]] #&gt; class : RasterLayer #&gt; band : 20 (of 52 bands) #&gt; dimensions : 5630, 7074, 39826620 (nrow, ncol, ncell) #&gt; resolution : 2963, 2963 (x, y) #&gt; extent : -2e+07, 943785, -6673060, 1e+07 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +a=6371007.181 +b=6371007.181 +units=m +no_defs #&gt; source : /Users/mes335/Library/Application Support/ebirdst/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13/results/tifs/logshr-ERD2018-EBIRD_SCIENCE-20191029-48417b13_hr_2018_abundance_median.tif #&gt; names : X2018.05.17 #&gt; values : 0, 2.15 (min, max) 1.6 Mapping Letâ€™s map a quick map of the May 17 abundance data to see what it looks like. The function abundance_palette() gives us access to the color palettes used in the online versions of the maps. par(mar = c(0, 0, 0, 0)) plot(abd[[20]], axes = FALSE, box = FALSE, col = abundance_palette(100, season = &quot;weekly&quot;), maxpixels = ncell(abd)) Notice the extreme distortion in the continents, that most of this map is taken up by areas where the species doesnâ€™t occur, and that there isnâ€™t much resolution in the color palette in areas where it does occur. These raster layers are provided for the entire Western Hemisphere in a sinusoidal equal area projection. This format ensures consistency across the full set of Status and Trends species, but isnâ€™t ideal for mapping the data for a single species. To address this, each Status and Trends data package comes with a set of parameters suitable for mapping the data for that species. Letâ€™s reproduce the above map using the provided extent, projection, and legend bins. # load mapping parameters map_pars &lt;- load_fac_map_parameters(sp_path) # crop and reproject abundance raster abd_proj &lt;- abd[[20]] %&gt;% crop(map_pars$fa_extent_sinu) %&gt;% projectRaster(crs = map_pars$custom_projection) # map par(mar = c(0, 0, 0, 0)) pal &lt;- abundance_palette(length(map_pars$abundance_bins), season = &#39;weekly&#39;) plot(abd_proj, breaks = c(0, map_pars$abundance_bins), col = c(&quot;#e6e6e6&quot;, pal), axes = FALSE, box = FALSE, maxpixels = ncell(abd_proj)) "]
]
